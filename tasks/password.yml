---

- name: Check if sysaccount name is defined
  assert:
    that:
      - sa is defined

- name: "Check if secret exists for sysaccount {{ sa }}"
  kubernetes.core.k8s_info:
    kind: Secret
    name: "{{ sa }}-sa"
    namespace: "{{ namespace }}"
  register: secret_info
  
- name: "Generate password for sysaccount {{ sa }}"
  when: not secret_info.resources
  block:

  - name: "Generate password for sysaccount {{ sa }}"
    register: pw
    shell: "set -o pipefail && head /dev/urandom | tr -dc A-Za-z0-9 | head -c32"

  - name: "Create secret in k8s for sysaccount {{ sa }}"
    kubernetes.core.k8s:
      definition:
        apiVersion: v1
        kind: Secret
        metadata:
          name: "{{ sa }}-sa"
          namespace: "{{ namespace }}"
        type: Opaque
        data:
          password: "{{ pw.stdout | b64encode }}"

  - name: "Fetch secret from k8s for sysaccount {{ sa }}"
    kubernetes.core.k8s_info:
      kind: Secret
      name: "{{ sa }}-sa"
      namespace: "{{ namespace }}"
    register: new_secret_info










##

- name: Set temp passwords fact
  set_fact:
    harbor_database_pw: ""

# # Create user secrets, used for eg setting admin password
# - name: Check if Harbor users secret exists
#   kubectl:
#     command: get
#     args: secret harbor-users
#     namespace: "{{ harbor.namespace }}"
#   register: harbor_users_secret_exists
#   ignore_errors: True
#   failed_when: False

- name: Check if Harbor users secret exists
  kubernetes.core.k8s_info:
    kind: Secret
    name: harbor-users
    namespace: "{{ harbor.namespace }}"
  register: harbor_users_secret_exists
  # delegate_to: "{{ groups[masters.group_name][0] }}"
  no_log: True


# this will run once!
- name: Generate random password for Harbor users
  when: harbor_users_secret_exists.rc != 0
  shell: "set -o pipefail && PW=$(date +%N | sha256sum | base64 | head -c 20);echo $PW"
  args:
    executable: /bin/bash
  register: random_users_pw
  run_once: true
  with_items:
    - admin
    - readonly
    - readwrite
    - database
  delegate_to: localhost
  no_log: True

# Create secret for Harbor users
- name: Create secret for Harbor users
  when: harbor_users_secret_exists.rc != 0
  kubectl:
    command: create
    # yamllint disable-line
    args: secret generic harbor-users --from-literal=admin=0Ap{{ random_users_pw.results[0].stdout_lines[0] }} --from-literal=readonly=1Gj{{ random_users_pw.results[1].stdout_lines[0] }} --from-literal=readwrite=2Fh{{ random_users_pw.results[2].stdout_lines[0] }} --from-literal=database=Ea1{{ random_users_pw.results[3].stdout_lines[0] }}  # noqa 204
    namespace: "{{ harbor.namespace }}"
  no_log: True




- name: Read secret with Harbor users
  kubectl:
    command: get
    args: secret harbor-users -o json | jq -crM '.data'
    namespace: "{{ harbor.namespace }}"
  register: harbor_pws_b64
  no_log: True

# Beschouw harbor_pws_b64.output als json met "from_json", (json)query dan op keyword (admin)
- name: Create harbor user password facts
  set_fact:
    harbor_admin_pw: "{{ harbor_pws_b64.output | from_json | json_query(\"admin\") | b64decode }}"
    harbor_readonly_pw: "{{ harbor_pws_b64.output | from_json | json_query(\"readonly\") | b64decode }}"
    harbor_readwrite_pw: "{{ harbor_pws_b64.output | from_json | json_query(\"readwrite\") | b64decode }}"
    harbor_database_pw: "{{ harbor_pws_b64.output | from_json | json_query(\"database\") | b64decode }}"
  no_log: True
